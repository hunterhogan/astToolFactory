diminutive2etymology: dict[str, str] = {
	'Add': '',
	'alias': '',
	'And': '',
	'AnnAssign': '***Ann***otated ***Assign***ment',
	'annotation': '',
	'arg': '***arg***ument',
	'args': '***arg***ument***s***',
	'argtypes': '***arg***ument types',
	'arguments': '',
	'asName': 'as Name',
	'asname': 'as name',
	'Assert': '',
	'Assign': '',
	'ast': 'abstract syntax tree',
	'AST': 'Abstract Syntax Tree',
	'async': '***async***hronous',
	'AsyncFor': '***Async***hronous For loop',
	'AsyncFunctionDef': '***Async***hronous Function ***Def***inition',
	'AsyncWith': '***Async***hronous With statement',
	'attr': '***attr***ibute',
	'Attribute': '',
	'AugAssign': '***Aug***mented ***Assign***ment',
	'await': '***await*** the asynchronous operation',
	'Await': '***Await*** the asynchronous operation',
	'bases': '',
	'BinOp': '***Bin***ary ***Op***eration',
	'BitAnd': '***Bit***wise And',
	'BitOr': '***Bit***wise Or',
	'BitXor': '***Bit***wise e***X***clusive Or',
	'body': '',
	'BoolOp': '***Bool***ean ***Op***eration',
	'boolop': '***bool***ean ***op***erator',
	'bound': '',
	'Break': '',
	'Call': '',
	'cases': '',
	'cause': '',
	'ClassDef': '***Class*** ***Def***inition',
	'cls': '***cl***a***s***s',
	'cmpop': '***c***o***mp***arison ***op***erator',
	'col_offset': '***col***umn offset',
	'comparators': '',
	'Compare': '',
	'comprehension': '',
	'Constant': '',
	'context_expr': '***context*** ***expr***ession',
	'Continue': '',
	'conversion': '',
	'ctx': '***c***on***t***e***x***t',
	'decorator_list': '',
	'def': '***def***inition',
	'default_value': '',
	'defaults': '',
	'Del': '***Del***ete',
	'Delete': '',
	'dict': '***dict***ionary',
	'Dict': '***Dict***ionary',
	'DictComp': '***Dict***ionary ***c***o***mp***rehension',
	'Div': '***Div***ision',
	'dotModule': 'package.Module notation',
	'elt': '***e***lemen***t***',
	'elts': '***e***lemen***t***s',
	'end_col_offset': 'end ***col***umn offset',
	'end_lineno': 'end line _**n**umer**o**_ (_Latin_ "number")',
	'Eq': 'is ***Eq***ual to',
	'exc': '***exc***eption',
	'excepthandler': '***except***ion ***handler***',
	'ExceptHandler': '***Except***ion ***Handler***',
	'expr_context': '***expr***ession ***context***',
	'expr': '***expr***ession',
	'Expr': '***Expr***ession',
	'Expression': '',
	'finalbody': 'final body',
	'FloorDiv': 'Floor ***Div***ision',
	'For': '',
	'format_spec': 'format ***spec***ification',
	'FormattedValue': '',
	'func': '***func***tion',
	'FunctionDef': 'Function ***Def***inition',
	'FunctionType': 'Function Type',
	'GeneratorExp': 'Generator ***Exp***ression',
	'generators': '',
	'Global': '',
	'Gt': 'is Greater than',
	'GtE': 'is Greater than or Equal to',
	'guard': '',
	'handlers': '',
	'id': '***id***entifier',
	'If': '',
	'IfExp': 'If ***Exp***ression',
	'ifs': 'if clauses',
	'Import': '',
	'ImportFrom': '',
	'In': '',
	'Interactive': 'Interactive mode',
	'Invert': '',
	'is_async': 'is ***async***hronous',
	'Is': '',
	'IsNot': '',
	'items': '',
	'iter': '***iter***able',
	'JoinedStr': 'Joined ***Str***ing',
	'key': '',
	'keys': '',
	'keyword': '',
	'keywords': '',
	'kind': '',
	'kw_defaults': '***k***ey***w***ord defaults',
	'kwarg': '***k***ey***w***ord ***arg***ument',
	'kwd_attrs': '***k***ey***w***or***d*** ***attr***ibute***s***',
	'kwd_patterns': '***k***ey***w***or***d*** ***patterns***',
	'kwonlyargs': '***k***ey***w***ord-only ***arg***ument***s***',
	'Lambda': 'Lambda function',
	'left': 'left-hand-side operand',
	'level': 'relative import level',
	'lineno': 'line _**n**umer**o**_ (_Latin_ "number")',
	'list_arg': 'list of ast.***arg***ument',
	'list_keyword': 'list of ast.***keyword***',
	'List': '',
	'ListComp': 'List ***c***o***mp***rehension',
	'Load': '',
	'lower': 'lower bound',
	'LShift': 'Left Shift',
	'Lt': 'is Less than',
	'LtE': 'is Less than or Equal to',
	'match_case': 'match case',
	'Match': 'Match this',
	'MatchAs': 'Match As',
	'MatchClass': 'Match Class',
	'MatchMapping': 'Match Mapping',
	'MatchOr': 'Match this Or that',
	'MatchSequence': 'Match this Sequence',
	'MatchSingleton': 'Match Singleton',
	'MatchStar': 'Match Star',
	'MatchValue': 'Match Value',
	'MatMult': '***Mat***rix ***Mult***iplication',
	'mod': '***mod***ule',
	'Mod': '***Mod***ulo',
	'Module': '',
	'module': '',
	'msg': '***m***e***s***sa***g***e',
	'Mult': '***Mult***iplication',
	'Name': '',
	'name': '',
	'NamedExpr': 'Named ***Expr***ession',
	'names': '',
	'Nonlocal': '',
	'Not': '',
	'NotEq': 'is Not ***Eq***ual to',
	'NotIn': 'is Not ***In***cluded in or does Not have membership In',
	'op': '***op***erator',
	'operand': '',
	'operator': '',
	'ops': '***op***erator***s***',
	'optional_vars': 'optional ***var***iable***s***',
	'Or': '',
	'orelse': 'or else execute this',
	'orElse': 'or Else execute this',
	'ParamSpec': '***Param***eter ***Spec***ification',
	'Pass': '',
	'pattern': '',
	'patterns': '',
	'posonlyargs': '***pos***itional-only ***arg***ument***s***',
	'Pow': '***Pow***er',
	'Raise': '',
	'rest': 'the rest of the mapping elements',
	'Return': '',
	'returns': 'this returns',
	'right': 'right-hand-side operand',
	'RShift': 'Right Shift',
	'Set': '',
	'SetComp': 'Set ***c***o***mp***rehension',
	'simple': '',
	'Slice': '',
	'slice': '',
	'Starred': '',
	'step': '',
	'stmt': '***st***ate***m***en***t***',
	'Store': '',
	'str': '***str***ing',
	'Sub': '***Sub***traction',
	'subject': '',
	'Subscript': '',
	'tag': '',
	'target': '',
	'targets': '',
	'test': '',
	'Try': '',
	'TryStar': 'Try executing this, protected by `except*` ("except star")',
	'Tuple': '',
	'type_comment': 'a `type` annotation in a comment',
	'type_ignore': 'this `type` error, you ignore it',
	'type_ignores': 'type ***ignore*** comments',
	'type_param': 'type ***param***eter',
	'type_params': 'type ***param***eter***s***',
	'type': '',
	'TypeAlias': 'Type Alias',
	'TypeIgnore': 'this Type (`type`) error, Ignore it',
	'TypeVar': 'Type ***Var***iable',
	'TypeVarTuple': 'Type ***Var***iable ***Tuple***',
	'UAdd': '***U***nary ***Add***ition',
	'UnaryOp': '***Un***ary ***Op***eration',
	'unaryop': '***un***ary ***op***erator',
	'upper': 'upper bound',
	'USub': '***U***nary ***Sub***traction',
	'value': '',
	'values': '',
	'vararg': '***var***iadic ***arg***ument',
	'While': '',
	'With': '',
	'withitem': 'with item',
	'Yield': 'Yield an element',
	'YieldFrom': 'Yield an element From',
}
